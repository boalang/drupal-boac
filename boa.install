<?php

/**
 * Implements hook_install().
 */
function boa_install() {
    $roles = user_roles(TRUE);

    if (!in_array('boa_user', $roles)) {
        $role1 = new stdClass();
        $role1->name = 'boa_user';
        user_role_save($role1);
    }

    if (!in_array('boa_admin', $roles)) {
        $role2 = new stdClass();
        $role2->name = 'boa_admin';
        user_role_save($role2);
    }

    $users = array(1); // for now, just target the first user, who is always an admin
    $boa_user_role = user_role_load_by_name('boa_user');
    $boa_admin_role = user_role_load_by_name('boa_admin');

    user_multiple_role_edit($users, 'add_role', $boa_user_role->rid);
    user_multiple_role_edit($users, 'add_role', $boa_admin_role->rid);

	$query = db_insert('boa_input');
	$query->fields(array(
        'id' => 1,
		'name' => '--live data--',
		'path' => 'live',
		'run_opts' => NULL,
		'compiler_path' => 'live',
		'enabled' => 1,
	));
	$query->execute();
}

/**
 * Implements hook_schema().
 */
function boa_schema() {
    $schema['boa_input'] = array(
        'description' => 'Boa input datasets.',
        'primary key' => array(
            'id',
        ),
        'fields' => array(
            'id' => array(
                'description' => 'Unique input dataset ID.',
                'type' => 'serial',
                'size' => 'big',
                'not null' => TRUE,
            ),
            'name' => array(
                'description' => 'The dataset name, shown on the web.',
                'type' => 'varchar',
                'length' => 50,
            ),
            'path' => array(
                'description' => 'Directory name in HDFS of the dataset.',
                'type' => 'varchar',
                'length' => 255,
            ),
            'run_opts' => array(
                'description' => 'Command-line options passed to the Hadoop jar.',
                'type' => 'varchar',
                'length' => 255,
            ),
            'compiler_path' => array(
                'description' => 'Directory name for the Boa compiler.',
                'type' => 'varchar',
                'length' => 255,
            ),
            'enabled' => array(
                'description' => 'Is the dataset enabled (1) or not (0).',
                'type' => 'int',
                'size' => 'tiny',
                'default' => 1,
            ),
        ),
    );

    $schema['boa_jobs'] = array(
        'description' => 'A Boa job.',
        'primary key' => array(
            'id',
        ),
        'fields' => array(
            'id' => array(
                'description' => 'Unique job ID.',
                'type' => 'serial',
                'not null' => TRUE,
            ),
            'uid' => array(
                'description' => 'The user ID owning this job.',
                'type' => 'int',
                'not null' => TRUE,
            ),
            'deleted' => array(
                'description' => 'If this job is deleted (1) or not (0).',
                'type' => 'int',
                'size' => 'tiny',
                'default' => 0,
            ),
            'public' => array(
                'description' => 'If this job is public (1) or private (0).',
                'type' => 'int',
                'size' => 'tiny',
                'default' => 0,
            ),
            'source' => array(
                'description' => 'The source code of the query.',
                'type' => 'text',
                'size' => 'medium',
            ),
            'created' => array(
                'description' => 'The time the job was originally created.',
                'mysql_type' => 'timestamp DEFAULT CURRENT_TIMESTAMP',
                'not null' => TRUE,
            ),
            'submitted' => array(
                'description' => 'The time the job was last submitted.',
                'mysql_type' => 'timestamp NULL',
                'default' => null,
            ),
            'input' => array(
                'description' => 'The input dataset ID.',
                'type' => 'int',
            ),
            'compiler_status' => array(
                'description' => 'Current status of the compiler. 0/not started 1/??? 2/??? 3/???.',
                'type' => 'int',
                'size' => 'tiny',
                'default' => 0,
            ),
            'compile_start' => array(
                'description' => 'The time the compiler started.',
                'mysql_type' => 'timestamp',
                'default' => '1970-01-01 00:00:01',
            ),
            'compile_end' => array(
                'description' => 'The time the compiler finished.',
                'mysql_type' => 'timestamp',
                'default' => '1970-01-01 00:00:01',
            ),
            'compiler_output' => array(
                'description' => 'The standard output/log of the compiler.',
                'type' => 'text',
                'size' => 'medium',
            ),
            'hadoop_status' => array(
                'description' => 'Current status of the Hadoop job. 0/not started 1/??? 2/??? 3/???',
                'type' => 'int',
                'size' => 'tiny',
                'default' => 0,
            ),
            'hadoop_start' => array(
                'description' => 'The time the Hadoop job started.',
                'mysql_type' => 'timestamp',
                'default' => '1970-01-01 00:00:01',
            ),
            'hadoop_end' => array(
                'description' => 'The time the Hadoop job finished.',
                'mysql_type' => 'timestamp',
                'default' => '1970-01-01 00:00:01',
            ),
            'hadoop_output' => array(
                'description' => 'The Hadoop job standard output/logs.',
                'type' => 'text',
                'size' => 'big',
            ),
            'hadoop_id' => array(
                'description' => 'The Hadoop job ID, if any.',
                'type' => 'varchar',
                'length' => 25,
            ),
            'parent_id' => array(
                'description' => 'The parent ID of this job, if any.',
                'type' => 'int',
                'size' => 'big',
            ),
        ),
        'indexes' => array(
            'uid' => array(
                'uid',
            ),
            'children' => array(
                'parent_id',
            ),
            'job_poller' => array(
                'compiler_status',
                'input',
            ),
            'hadoop_status' => array(
                'hadoop_status',
            ),
            'caching_job' => array(
                'input',
                array('source', 200),
            ),
            'publicjobs' => array(
                'public',
                'deleted',
            ),
        ),
    );

    // maybe TODO ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=16
    $schema['boa_output'] = array(
        'description' => 'Information about the output/results of a job after Hadoop runs.',
        'primary key' => array(
            'id',
        ),
        'fields' => array(
            'id' => array(
                'description' => 'Job ID of this output.',
                'type' => 'int',
                'size' => 'big',
                'not null' => TRUE,
            ),
            'length' => array(
                'description' => 'How many bytes is the full output.',
                'type' => 'int',
                'size' => 'big',
            ),
            'count' => array(
                'description' => 'Number of papers in the output.',
                'type' => 'int',
                'size' => 'big',
            ),
            'web_count' => array(
                'description' => 'Number of papers in the First part of the output, to display on the web.',
                'type' => 'int',
                'size' => 'big',
            ),
            'hash' => array(
                'description' => 'Hash of the output, used by API to get file contents.',
                'type' => 'char',
                'length' => '32',
            ),
            'web_result' => array(
                'description' => 'First part of the output, to display on the web.',
                'type' => 'text',
            ),
        ),
    );

    return $schema;
}

?>
